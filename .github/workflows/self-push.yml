name: Self-hosted runner (push)

on:
  push:
    branches:
      - master
    paths:
      - "src/**"
      - "tests/**"
      - ".github/**"
      - "templates/**"
  repository_dispatch:

jobs:
  run_tests_torch_gpu:
    runs-on: [self-hosted, docker-gpu, multi-gpu]
    container:
      image: nvcr.io/nvidia/pytorch:21.02-py3
      options: --gpus all --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
    steps:
      - name: Launcher docker
        uses: actions/checkout@v2

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Install dependencies
        run: |
          python -c "import torch; print(torch.cuda.is_available())"
          pip install --upgrade pip
          pip install .[sklearn,testing,onnxruntime,sentencepiece]

      - name: Are GPUs recognized by our DL frameworks
        env:
          CUDA_VISIBLE_DEVICES: 0
        run: |
          python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
          python -c "import torch; print('Cuda version:', torch.version.cuda)"
          python -c "import torch; print('Number of GPUs available:', torch.cuda.device_count())"

      - name: Run all non-slow tests on GPU
        env:
          OMP_NUM_THREADS: 8
          CUDA_VISIBLE_DEVICES: 0
          HF_HOME: /mnt/cache
        run: |
          python -m pytest -n 2 --dist=loadfile --make-reports=tests_torch_gpu tests

      - name: Failure short reports
        if: ${{ always() }}
        run: cat reports/tests_torch_gpu_failures_short.txt

      - name: Test suite reports artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_all_tests_torch_gpu_test_reports
          path: reports

  run_tests_tf_gpu:
    runs-on: [self-hosted, docker-gpu, single-gpu, no-run]
    container:
      image: nvcr.io/nvidia/tensorflow:21.02-tf2-py3
      options: --gpus all --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
    steps:
      - name: Launcher docker
        uses: actions/checkout@v2

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[sklearn,testing,onnxruntime,sentencepiece]

      - name: Are GPUs recognized by our DL frameworks
        env:
          CUDA_VISIBLE_DEVICES: 0
        run: |
          TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('TF GPUs available:', bool(tf.config.list_physical_devices('GPU')))"
          TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('Number of TF GPUs available:', len(tf.config.list_physical_devices('GPU')))"

      - name: Run all non-slow tests on GPU
        env:
          OMP_NUM_THREADS: 8
          CUDA_VISIBLE_DEVICES: 0
          HF_HOME: /mnt/cache
        run: |
          python -m pytest -n 2 --dist=loadfile --make-reports=tests_tf_gpu tests

      - name: Failure short reports
        if: ${{ always() }}
        run: cat reports/tests_tf_gpu_failures_short.txt

      - name: Test suite reports artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_all_tests_tf_gpu_test_reports
          path: reports


  run_tests_torch_multi_gpu:
    runs-on: [self-hosted, docker-gpu, multi-gpu, no-run]
    container:
      image: nvcr.io/nvidia/pytorch:21.02-py3
      options: --gpus all --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
    steps:
      - name: Launcher docker
        uses: actions/checkout@v2

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[sklearn,testing,onnxruntime,sentencepiece]

      - name: Are GPUs recognized by our DL frameworks
        run: |
          python -c "import torch; print('Cuda available:', torch.cuda.is_available())"
          python -c "import torch; print('Cuda version:', torch.version.cuda)"
          python -c "import torch; print('Number of GPUs available:', torch.cuda.device_count())"

      - name: Run all non-slow tests on GPU
        env:
          OMP_NUM_THREADS: 8
          HF_HOME: /mnt/cache
        run: |
          python -m pytest -n 2 --dist=loadfile --make-reports=tests_torch_multi_gpu tests

      - name: Failure short reports
        if: ${{ always() }}
        run: cat reports/tests_torch_multi_gpu_failures_short.txt

      - name: Test suite reports artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_all_tests_torch_multi_gpu_test_reports
          path: reports

  run_tests_tf_multi_gpu:
    runs-on: [self-hosted, docker-gpu, multi-gpu, no-run]
    container:
      image: nvcr.io/nvidia/tensorflow:21.02-tf2-py3
      options: --gpus all --shm-size "16gb" --ipc host -v /mnt/cache/.cache/huggingface:/mnt/cache/
    steps:
      - name: Launcher docker
        uses: actions/checkout@v2

      - name: NVIDIA-SMI
        run: |
          nvidia-smi

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .[sklearn,testing,onnxruntime,sentencepiece]

      - name: Are GPUs recognized by our DL frameworks
        run: |
          TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('TF GPUs available:', bool(tf.config.list_physical_devices('GPU')))"
          TF_CPP_MIN_LOG_LEVEL=3 python -c "import tensorflow as tf; print('Number of TF GPUs available:', len(tf.config.list_physical_devices('GPU')))"

      - name: Run all non-slow tests on GPU
        env:
          OMP_NUM_THREADS: 8
          HF_HOME: /mnt/cache
        run: |
          python -m pytest -n 2 --dist=loadfile --make-reports=tests_tf_multi_gpu tests

      - name: Failure short reports
        if: ${{ always() }}
        run: cat reports/tests_tf_multi_gpu_failures_short.txt

      - name: Test suite reports artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: run_all_tests_tf_multi_gpu_test_reports
          path: reports
